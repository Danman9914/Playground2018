//
//Made by HikkusT
//
//#define EUCLIDIAN_DISTANCE

#pragma kernel ColorQ
#pragma kernel ColorQInitialize

Texture2D<float4> Screen;
Texture2D<float4> ColorPalette;
int Size;
bool EUCLIDIAN_DISTANCE;

struct colorStruct {
	int4 color;
};

RWStructuredBuffer<colorStruct> ColorBuffer;

[numthreads(1, 1, 1)]
void ColorQInitialize(uint3 id : SV_DispatchThreadID)
{
	ColorBuffer[id.x].color = int4(0, 0, 0, 0);
}

[numthreads(8,8,1)]
void ColorQ(uint3 id : SV_DispatchThreadID)
{
	colorStruct screenColor;
	screenColor.color = int4(255 * Screen[id.xy]);

	float minDist = 10000000;
	int index = 0;

	for(int j = 0; j < Size; j ++)
	{
		float dist = 0;
		if(EUCLIDIAN_DISTANCE)
		{
			colorStruct paletteColor, diff;
			paletteColor.color = int4(255 * ColorPalette[uint2(0, j)]);
			diff.color = screenColor.color - paletteColor.color;

			dist = dot(diff.color, diff.color);
		}
		else
		{
			float4 paletteColor = normalize(ColorPalette[uint2(0, j)]);

			dist = 1 - dot(screenColor.color, paletteColor)/sqrt(dot(screenColor.color, screenColor.color) * dot(paletteColor,paletteColor));
		}
		
		if(dist < minDist)
		{
			minDist = dist;
			index = j;
		}
	}
	
	//Add to accumulated texture
	InterlockedAdd(ColorBuffer[index].color.r, screenColor.color.r);
	InterlockedAdd(ColorBuffer[index].color.g, screenColor.color.g);
	InterlockedAdd(ColorBuffer[index].color.b, screenColor.color.b);
	InterlockedAdd(ColorBuffer[index].color.a, 1);
}